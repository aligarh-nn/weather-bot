import logging
import requests
from datetime import datetime, timedelta, time as dtime
import asyncio
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, CallbackContext

TELEGRAM_TOKEN = "8313163480:AAFfPfP488s6CU2wNRW7izYO5XgVzagIK_U"
OPENWEATHER_API_KEY = "5651fa2b774956bf6c11e9b3cee22651"

logging.basicConfig(level=logging.INFO)

SUBSCRIBERS_FILE = "subscribers.txt"

def save_subscriber(chat_id: int):
    try:
        with open(SUBSCRIBERS_FILE, "a") as f:
            f.write(f"{chat_id}\n")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–∞: {e}")

def load_subscribers():
    try:
        with open(SUBSCRIBERS_FILE, "r") as f:
            return set(int(line.strip()) for line in f if line.strip().isdigit())
    except FileNotFoundError:
        return set()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {e}")
        return set()

def get_weather(city="–†—è–∑–∞–Ω—å"):
    try:
        url_current = (
            f"https://api.openweathermap.org/data/2.5/weather"
            f"?q={city}&appid={OPENWEATHER_API_KEY}&units=metric&lang=ru"
        )
        current = requests.get(url_current).json()

        if current.get("cod") != 200:
            return f"–û—à–∏–±–∫–∞: {current.get('message', '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ')}"

        temp = current["main"]["temp"]
        feels_like = current["main"]["feels_like"]
        description = current["weather"][0]["description"].capitalize()
        humidity = current["main"]["humidity"]

        lat = current["coord"]["lat"]
        lon = current["coord"]["lon"]

        url_forecast = (
            f"https://api.openweathermap.org/data/2.5/forecast"
            f"?lat={lat}&lon={lon}&appid={OPENWEATHER_API_KEY}&units=metric&lang=ru"
        )
        forecast_data = requests.get(url_forecast).json()

        if forecast_data.get("cod") != "200":
            return f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞: {forecast_data.get('message', '')}"

        now = datetime.utcnow()
        next_day = (now + timedelta(days=1)).date()

        rain_hours = []
        for item in forecast_data["list"]:
            dt_txt = item["dt_txt"]
            dt_obj = datetime.strptime(dt_txt, "%Y-%m-%d %H:%M:%S")
            date_only = dt_obj.date()

            if date_only == next_day:
                pop = item.get("pop", 0)
                rain = item.get("rain", {}).get("3h", 0)

                if pop >= 0.5 and rain > 0.2:
                    time_str = dt_obj.strftime("%H:%M")
                    rain_hours.append(f"{time_str} ‚Äî –¥–æ–∂–¥—å ({rain:.1f} –º–º, –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å {int(pop*100)}%)")

        rain_info = "\n".join(rain_hours) if rain_hours else "–î–æ–∂–¥—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è."

        return (
            f"üå¶ –ü–æ–≥–æ–¥–∞ –≤ {city}:\n"
            f"{description}, {temp}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like}¬∞C)\n"
            f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n\n"
            f"‚òî –ü—Ä–æ–≥–Ω–æ–∑ –¥–æ–∂–¥—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å ({next_day}):\n"
            f"{rain_info}"
        )
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã: {e}"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    subscribers = load_subscribers()
    if chat_id not in subscribers:
        save_subscriber(chat_id)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ /pogoda –∏–ª–∏ /pogoda [–≥–æ—Ä–æ–¥], —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É.")

async def weather(update: Update, context: ContextTypes.DEFAULT_TYPE):
    city = "–†—è–∑–∞–Ω—å"
    if context.args:
        city = " ".join(context.args)
    text = get_weather(city)
    await update.message.reply_text(text)

async def daily_weather_sender(app):
    while True:
        now = datetime.utcnow()
        target_time = datetime.combine(now.date(), dtime(hour=11, minute=0))  # 14:00 –ø–æ –ú–æ—Å–∫–≤–µ = 11:00 UTC (–ª–µ—Ç–æ–º)
        if now > target_time:
            target_time += timedelta(days=1)
        wait_seconds = (target_time - now).total_seconds()
        await asyncio.sleep(wait_seconds)

        subscribers = load_subscribers()
        for chat_id in subscribers:
            try:
                text = get_weather("–†—è–∑–∞–Ω—å")
                await app.bot.send_message(chat_id=chat_id, text=f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞:\n\n{text}")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")

        # –ñ–¥–µ–º –µ—â–µ —Å—É—Ç–∫–∏
        await asyncio.sleep(24 * 3600 - wait_seconds)

if __name__ == "__main__":
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("pogoda", weather))

    # –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –ø–æ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–µ –ø—Ä–æ–≥–Ω–æ–∑–∞
    app.job_queue.run_repeating(lambda ctx: asyncio.create_task(daily_weather_sender(app)), interval=24*3600, first=1)

    app.run_polling()
